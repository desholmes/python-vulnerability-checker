from os import environ, system
import logging
import json


def envs_are_set():
    required_environment_variables = [
        "SKJOLD_GITHUB_API_TOKEN",
    ]

    missing_env_vars = [ev for ev in required_environment_variables
                        if environ.get(ev) is None]
    if missing_env_vars:
        logging.error(f"Environment variables \
            missing: {','.join(missing_env_vars)}")
        exit(1)


def set_log_level():
    LOG_LEVEL = environ.get("LOG_LEVEL")
    if LOG_LEVEL is None:
        LOG_LEVEL = logging.INFO
    logging.basicConfig(format='%(levelname)s:%(message)s', level=LOG_LEVEL)


def get_requirements_file(default):
    requirements_file = ""
    env_requirements = environ.get("REQUIREMENTS_FILE")

    if env_requirements:
        requirements_file = env_requirements
        logging.info("REQUIREMENTS_FILE set: "
                     f"'{requirements_file}'")
    else:
        requirements_file = default
        logging.info("REQUIREMENTS_FILE not set, "
                     f"using the default '{requirements_file}'")

    return requirements_file


def reqs_file_exists(reqs_file, analyse_path):
    reqs_path = f"{analyse_path}/{reqs_file}"

    try:
        f = open(reqs_path)
    except IOError:
        logging.error("Requirements file not found: "
                      f"{reqs_path}")
        exit(1)
    finally:
        f.close()


def make_json_report(requirements_file, analyse_path, json_report):
    reqs_path = f"{analyse_path}/{requirements_file}"
    report_path = f"{analyse_path}/{json_report}"
    logging.info(f"Running report {report_path} "
                 f"on requirements {reqs_path}")
    # TODO - try catch
    system(f"skjold -v audit -o json {reqs_path} > {report_path}")


def make_log_report(json_report):
    try:
        with open(json_report) as json_file:
            reports = json.load(json_file)
            print(len(reports))

        for report in reports:  
            print('severity: ' + report['severity'])

    except IOError:
        logging.error("JSON report not found: "
                      f"{json_report}")
        exit(1)


def init():
    # defaults
    analyse_path = "./analyse"
    requirements_file = "requirements.txt"
    json_report = "skjold-report.json"

    set_log_level()
    envs_are_set()
    reqs_file = get_requirements_file(requirements_file)
    reqs_file_exists(reqs_file, analyse_path)
    make_json_report(reqs_file, analyse_path, json_report)
    print(f"{analyse_path}/{reqs_file}")
    make_log_report(f"{analyse_path}/{reqs_file}")


if __name__ == "__main__":
    init()
